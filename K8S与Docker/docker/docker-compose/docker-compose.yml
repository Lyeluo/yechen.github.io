version: '3'
services:
  redis:
    image: ecs-redis:${REDIS_VERSION}
    hostname: "ecs-redis"
    container_name: ecs-redis
    volumes:
      - ./redis-data:/data
    ports:
      - ${REDIS_PORT}:6379
    restart: always
    command: "--appendonly yes"
    env_file: .env
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
  mysql:
    image: mysql:8.0.20
    hostname: "ecs-mysql"
    container_name: ecs-mysql
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./mysql/db:/var/lib/mysql
      # mysql容器会自动初始化docker-entrypoint-initdb.d 目录下的
      - ./mysql/init-sql:/docker-entrypoint-initdb.d
    command: --lower_case_table_names=1
    ports:
      - ${MYSQL_PORT}:3306
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
  nginx:
    image: nginx:1.18.0
    hostname: "ecs-nginx"
    container_name: ecs-nginx
    restart: always
    env_file: .env
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/logs:/var/log/nginx
    ports:
      - ${NGINX_PORT_1_MAP}:${NGINX_PORT_1}
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
  ecs-job:
    image: ecs-job-center:1.0.8
    hostname: "ecs-job-center"
    container_name: ecs-job-center
    restart: always
    env_file: .env
    environment:
      ECS_CONSOLE_URL: http://ecs:8095/ecs/console/authApi/auth/isAuthorized
      DB_USERNAME : root
      DB_URL : mysql:3306
      DB_PASSWORD : ${MYSQL_ROOT_PASSWORD}
      ACCESS_TOKEN: ${JOB_CENTER_TOKEN}
    ports:
      - ${JOB_CENTER_PORT}:8081
    depends_on:
      - mysql
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
  mq-namesrv:
    image: yuanian/rocketmq-namesrv:4.7.1
    container_name: mq-namesrv
    ports:
      - 9876:9876
    restart: always
    environment:
      SERVER_JVM_XMS: 1g
      SERVER_JVM_XMX: 1g
      SERVER_JVM_XMN: 500m
      SERVER_JVM_METASPACESIZE: 128m
      SERVER_JVM_MAX_METASPACESIZE: 320m
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "1"
  mq-broker:
    image: yuanian/rocketmq-broker:4.7.1
    container_name: mq-broker
    ports:
      - 10909:10909
      - 10911:10911
    restart: always
    environment:
      NAMESRV: ${NAMESRV}
      BROKER_JVM_XMS: 3g
      BROKER_JVM_XMX: 3g
      BROKER_JVM_XMN: 1g
    env_file: .env
    volumes:
      - ./rocketmq/store:/opt/rocketmq/store
      - ./rocketmq/conf/broker.conf:/opt/conf/broker.conf
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "1"
  metadata:
    image: ecs-metadata:latest
    build:
      context: ./metadata/build
    container_name: ecs-metadata
    volumes:
      - ./metadata/upgrade/config:/opt
      - ./metadata/conf/application.properties:/opt/application.properties
    depends_on:
      - mysql
  ecs:
    image: ecs-boot:latest
    build:
      context: ./ecs/build
    container_name: ecs-boot
    restart: always
    # 互相访问地址时，直接采用名称即可，即访问mysql地址为 mysql:3306
    depends_on:
      - redis
      - ecs-job
      - mq-namesrv
      - mq-broker
      - metadata
    volumes:
      - ./ecs/conf/cloud_application-dev.yml:/opt/cloud_application-dev.yml
    ports:
      - ${ECS_PORT_1_MAP}:${ECS_PORT_1}
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "3"
